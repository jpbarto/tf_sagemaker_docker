#!/usr/bin/env python
# Copyright 2015 The TensorFlow Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================

"""Simple, end-to-end, LeNet-5-like convolutional MNIST model example.

This should achieve a test error of 0.7%. Please keep this model as simple and
linear as possible, it is meant as a tutorial for simple convolutional models.
Run with --self_test on the command line to execute a short self-test.
"""
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import os
import sys
import traceback
import json

import model_data
import mnist_model

prefix = '/opt/ml'
input_path = os.path.join(prefix, 'input', 'data')
output_path = os.path.join(prefix, 'output')
model_path = os.path.join(prefix, 'model', 'model.ckpt')
data_config_path = os.path.join(
    prefix, 'input', 'config', 'inputdataconfig.json')
param_path = os.path.join(prefix, 'input', 'config', 'hyperparameters.json')

training_channel_name = 'training'
training_path = os.path.join(input_path, training_channel_name)
eval_channel_name = 'eval'
eval_path = os.path.join(input_path, eval_channel_name)

def main():
    try:
        training_params = {}
        with open(param_path, 'r') as tc:
            training_params = json.load(tc)

        input_files = [os.path.join(training_path, fname)
                       for fname in os.listdir(training_path)]
        if len(input_files) == 0:
            raise ValueError("There are no files in {}.\n" +
                             "This usually indicates the channel {} was incorrectly specified.".format(training_path, training_channel_name))
        input_files = [os.path.join(eval_path, fname)
                       for fname in os.listdir(eval_path)]
        if len(input_files) == 0:
            raise ValueError("There are no files in {}.\nThis usually indicates the channel {} was incorrectly specified.".format(eval_path, eval_channel_name))

        (train_data, train_labels) = model_data.train_data(training_path)
        (test_data, test_labels) = model_data.test_data(eval_path)

        model = mnist_model.Model (training_params)        
        model.train(
            train_data_set={'features': train_data, 'labels': train_labels},
            eval_data_set={'features': test_data, 'labels': test_labels}
        )

        model.save (model_path)
    except Exception as e:
        trc = traceback.format_exc()
        with open(os.path.join(output_path, 'failure'), 'w') as s:
            s.write("Exception during training: {}\n{}".format(e, trc))
        print ("Exception during training: {}\n{}".format(
            e, trc), file=sys.stderr)
        sys.exit(255)


if __name__ == '__main__':
    main()

    # a zero exit code causes the job to be marked as Succeeded
    sys.exit(0)
